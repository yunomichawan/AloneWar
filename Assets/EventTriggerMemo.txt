ステージ上でのイベントの設定方法、起動方法について

エディター
1．未作成

メイン

□トリガー設定
1．トリガーの実装について
・各トリガー上で実装する
・TriggerSenderについて
引数は,(カンマ)区切りとする
配列は/(スラッシュ)区切りとする

□EventTriggerCategory
・TurnOver
実装箇所：ターン経過
TriggerSender：ターン数

・PositionStop
実装箇所：ユニット移動、配置
TriggerSender：
int[]：座標ID
UnitSideCategory：どちら側に有効か

・PositionClose
実装箇所：マスオブジェクト
TriggerSender：
int[]：座標ID

・AreaStop
実装箇所：ユニット移動、配置
TriggerSender：
stiring：エリアキー(アルファベット)
UnitSideCategory：どちら側に有効か

・UnitKill
実装箇所：ユニット退場
TriggerSender：
UnitSideCategory：どちら側に有効か

・TargetUnitKill
実装箇所：ユニット退場
TriggerSender：
int：ステージユニットID(StageObjectId)

・UnitAdjacent
実装箇所：ユニット移動、配置
TriggerSender：
int：ステージユニットID(StageObjectId)
UnitSideCategory：どちら側に有効か

・StageStart
実装箇所：ステージ開始
TriggerSender：
null

・StageEnd
実装箇所：ステージ終了
TriggerSender：
null

□イベント設定
1．イベントの実装について
・EventSenderについて
引数は,(カンマ)区切りとする
配列は/(スラッシュ)区切りとする

□EventCategory
・GetUnit
実装箇所：
EventSender：
int[]：UnitId

・Getitem
実装箇所：
EventSender：
int[]：ItemId

・GetSkill
実装箇所：
EventSender：
int[]：SkillId

・Talk
実装箇所：
EventSender：
int：ScenarioId

・UnitDamage
実装箇所：
EventSender：
int[]：ステージユニットID(StageObjectId)
int：damge point

・UnitKill
実装箇所：
EventSender：
int[]：ステージユニットID(StageObjectId)

・UnitSummon
実装箇所：
注意：
生成するユニットのIDを採番し直すこと
EventSender：
int[]：UnitStageStatusData.Id

・PositionClose
実装箇所：
EventSender：
int[]：座標ID

・AiChange
実装箇所：
EventSender：
int[]：ステージユニットID(StageObjectId)
AiCategory：変更後の値

・SideChange
実装箇所：
EventSender：
int[]：ステージユニットID(StageObjectId)
UnitSideCategory：変更後の値

-----------------------------------------------------------------------------------------------------------------------

イベント実装方法

1．各コマンド終了後に仕掛けられているイベントを確認し条件を満たしているイベントを実行
メリット：
・初期化コストが安い
デメリット：
・イベントがあればあるほどコマンド終了後のコストが高くなる(以前の構想)
実装もれ防止
・

2．最初にトリガーを判別しそれぞれのオブジェクトにイベントを仕掛ける(今回の構想)
メリット：
・オブジェクト単位でトリガーをセットするためデバッグがしやすくなる。イベント1つ1つチェックする必要がない
デメリット：
・初期化コストが高い
実装もれ防止
・
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AloneWar.Unit.Status;

namespace AloneWar.Battle
{
    /// <summary>
    /// 予測結果
    /// </summary>
    public class PredictionBattleResult
    {
        /// <summary>
        /// 結果期待値
        /// </summary>
        public int ResultExpectedValue { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public int Distance { get; set; }

        /// <summary>
        /// 仮座標ID
        /// </summary>
        public int TempPositionId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public BattleResultInfo AttackBattleResultInfo { get; set; }
        
        /// <summary>
        /// 
        /// </summary>
        public BattleResultInfo DefenceBattleResultInfo { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="attackUnitBaseStatus"></param>
        /// <param name="defenceUnitBaseStatus"></param>
        public PredictionBattleResult(UnitBaseStatus attackUnitBaseStatus, UnitBaseStatus defenceUnitBaseStatus, int distance, int tempPositionId)
        {
            this.Distance = distance;
            this.TempPositionId = tempPositionId;
            this.AttackBattleResultInfo = new BattleResultInfo(attackUnitBaseStatus, defenceUnitBaseStatus, distance);
            this.DefenceBattleResultInfo = new BattleResultInfo(defenceUnitBaseStatus, attackUnitBaseStatus, distance);
        }

        /// <summary>
        /// 結果期待値を計算
        /// </summary>
        private void CountResultExpectedValue()
        {
            int count = 0;
            if (this.DefenceBattleResultInfo.IsKill)
            {
                count= 0;
            }
            else
            {
                // 与 - 被
                count += this.AttackBattleResultInfo.Damage - this.DefenceBattleResultInfo.Damage;

            }

            this.ResultExpectedValue = count;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class BattleResultInfo
    {
        #region display property

        public int Hp { get { return this.AttackUnitStatus.DamageHp; } }

        public int ResultHp { get { return this.Hp - this.Damage; } }

        public int Damage { get; set; }

        public float HitPercent { get { return this.hitPercent; } set; }
        private float hitPercent = 0;

        public float AvoidPercent { get; set; }
        private float avoidPercent = 0;

        public bool IsKill { get; set; }

        public bool CanAttack { get; set; }

        #endregion

        private UnitBaseStatus AttackUnitStatus { get; set; }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="attack"></param>
        /// <param name="defence"></param>
        public BattleResultInfo(UnitBaseStatus attack, UnitBaseStatus defence, int distance)
        {
            // 有効範囲の場合
            if (attack.BaseStatus.Range >= distance && distance > attack.BaseStatus.InvalidRange)
            {
                this.Damage = defence.BaseStatus.Defence - attack.BaseStatus.Attack;
                this.CanAttack = true;
                this.HitPercent = attack.BaseStatus.Hit - defence.BaseStatus.Avoid;
                this.IsKill = defence.BaseStatus.Hp <= this.Damage + defence.StageStatus.Damage;
            }
            else
            {
                this.Damage = 0;
                this.CanAttack = false;
                this.IsKill = false;
            }
            this.AvoidPercent = defence.BaseStatus.Hit - attack.BaseStatus.Avoid;
            this.AttackUnitStatus = attack;
        }
    }
}

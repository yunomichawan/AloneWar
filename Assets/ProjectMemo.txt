プロジェクトメモ帳
・書留
・プロトバージョンスケジュール
・バージョン管理
・ソース管理
・フォルダ構成
・クラス名とUnityオブジェクトに関する命名規則(簡易)
・DB、ER図

□書留
1．実装する処理について
・アニメーションを順番に実行するクラス。
・順番に実行する処理をまとめるクラス。TaskListみたいな
2．エディター拡張について
・ステージの作成、ユニットの作成等々のバランス調整部分をエディター拡張を行い簡易化する
3．アセットストア等の外部リソースについて
・グラフィック、演出周りはアセットストアを利用すること
4．言語管理について
・基本的には日本語を使用する。ただUIに表示されるテキストはリソースファイルで管理し複数言語対応が簡単に行えるようにする。(必要性は低いがやっておいて損はなし)
5．演出について
・最初から演出を入れる必要はないが簡単に演出を挟み込めるように処理を作成する。
・エフェクトを利用する場合はアセットストア等を利用すること
6．ソースの自動ドキュメント化
・ソースを自動ドキュメント化するツールを探しておく
・ツールのコメントフォーマットに基づきコメントを書くようにする。
7．目標FPS
・30～60fps
8．エディター拡張とメイン実装
・
9．Sqliteの扱いについて
・基本的にマスターデータのみを配置する。
・アップデートのことを考えて、登録削除は極力行わない。
・更新も登録削除ほどではないが避けたい。
・プライマリキーは連番で管理する
10．セーブデータについて
・Json形式を検討
・Sqliteで行う場合、データごとにDBファイルを分ける（データの混合、データ量の肥大化を回避 ）
・初期DBファイルは残すこと
XX．その他
・リリースはSteamもしくはniconico等で行う予定。あくまで予定、ほかにも手段を考えたい
・最終的な目標はコンシューマー。そこまでクオリティを上げられるか？
・このテキストファイルをPDF、Word等で管理する。
・実装の関係上どうしてもスケジュール通りに行かない場合が出てくるはず。その際は先に対象のブランチを作成しそのブランチで管理する。コンフリクトが怖いが練習と考える。
□バージョンスケジュール
0.0　…　インフラ整備、方針決定					
		 |-1.0実装内容決定						
		 |-ソース管理方法						
		 |-データ取得方法(Sqlite、Json)			
		 |-DB設計								

0.1　…　UI実装									
		 |-タイトル								
		 |-ゲームスタート						
		 |-チュートリアル						
		 |-ゲームオーバー						
		 |-エンドロール							
		 |-ADVUI								
		 |-ロード								
		 |-ホームUI								
		 |	|-ユニット一覧UI					
		 |	|-ユニット育成UI					
		 |	|-アイテム一覧UI					
		 |	|-アイテム装備UI					
		 |	|-ステージ一覧UI					
		 |	|-セーブ/ロード一覧UI				
		 |	|-オプションUI						
		 |	|	|-ユニット移動速度				
		 |-ステージ操作UI						
		 |	|-メインコマンドUI					
		 |	|-ユニットコマンドUI				

0.2　…　ADV実装								
		 |-ウィンドウ操作						
		 |-テキスト表示							
		 |-BGM、SE								
		 |-演出									
			|-グラフィック変化					
			|-暗転
			|-簡易アニメーション
0.3　…　エディター拡張
		 |-ステージエディター
		 |	|-ステージサイズ設定
		 |	|-ユニット配置
		 |-ユニットエディター
		 |-アイテムエディター
		 |-スキルエディター
		 
0.4　…　ゲームフロー実装

0.5　…　コマンド処理実装
		 |-ユニットコマンド
		 |-メインコマンド

0.6　…　ステージフロー実装
		 |-ステージ生成
		 |-ステージ開始
		 |-ステージ開始準備
		 |-ステージ終了
		 |-ステージ中断、再開
		 |-プレイヤーターン
		 |-エネミーターン

0.7　…　ユニット
		 |-ステータス付与(バフ、デバフ)
		 |-ステージ初期配置
		 |-召喚配置(HP)
		 |-召喚配置(MP)
		 |-ユニット破棄
		 |-配置演出
		 |-AI実装
			 |-最少HP
			 |-最短距離
			 |-範囲内
			 |-固定
			 |-攻撃範囲外
			 |-メインユニット狙い

0.8　…　イベント実装
		 |-ステージイベントエディター
		 |	|-対象ユニット設定
		 |	|-効果設定
		 |	|-シナリオ設定
		 |
		 |-シナリオイベントエディター
		 |	|-シナリオ設定
		 |	|-イベント効果設定

0.9　…　リリース準備
		 |-問い合わせ、要望用メールアドレス取得
		 |-twitter等の各種アカウント取得
		 |-販売、配布方法の決定
		 |-動画サイト等での宣伝
		 |-サークル名の決定

1.0　…　リリース予定

□バージョン管理
・リリースするまでは一桁目は0とし、プロトバージョンとする。
・バージョンのファーマットはn.x1.x2。桁数に制限は無し。
n	…	バージョン番号
x1	…	機能ごとに区切る番号
x2	…	機能内のおおまかな分類

□ソース管理
・ソース管理はgitで行う。リポジトリはローカルのみで作成。
・リリースごとにbranchを切る。
・masterには基本的に区切りのいいタイミングでアップ

□フォルダ構成
Project
|-Scripts												…　実行に必要なスクリプトファイル
|	|-Animation											…　アニメーション周り
|	|	|-
|	|	|-
|	|	
|	|-AttachComponent					
|	|	|-
|	|	
|	|-DataObject										…　データオブジェクト
|	|	|-Sqlite										…　Sqlite周り
|	|	|	|-Helper									…　接続周り
|	|	|	|-SqliteAttribute							…　Sqlite属性
|	|	|	|-SqliteObject								…　Sqliteテーブルオブジェクト
|	|	|	|	|-Base									…　ベース、IF
|	|	|	|-Service									…　オブジェクトごとの接続
|	|	|
|	|	|-Json											…　Json周り
|	|	|	|-Helper									…　接続?周り
|	|	|	|-JsonObject								…　Jsonオブジェクト
|	|	|	
|	|	|-Server										…　サーバー通信周り
|	|	|	|-Helper									…　接続周り
|	|	|	|-ServerObject								…　Serverオブジェクト
|	|	|	|-Service									…　オブジェクトごとの接続
|	|-Stage												…　ステージ周り
|	|	|-Field											…　盤周り、盤を構成するオブジェクト等
|	|	|-FieldObject									…　盤上に配置されるオブジェクト
|	|
|	|-UI												…　UI周り
|	|	|-ADV											…　ADVUI周り
|	|	|-Common										…　UI共通実装
|	|
|	|-Unit												…　ユニット素材
|	|	|-Grow											…　成長
|	|	|-Status										…　ステータス
|	|	|-UnitAI										…　AI
|	|
|	|-Item												…　アイテム
|	|	|-
|	|
|	|-Battle											…　戦闘
|	|	|-
|	|
|	|-Sound												…　音
|	|
|	|-Common											…　共通実装
|	|	|-Extensions									…　拡張メソッド実装
|	|	|-Bind											…　オブジェクトバインダー実装
|	|
|-Editor												…　
|-EditorDefaultResources								…　
|-Plugins												…　
|-Resources												…　
|	|-Prefab											…　
|	|-Sprite											…　
|	|-Text												…　
|-StreamingAssets										…　sqliteファイルの配置等々
|	|-
|	|-

□命名規則
1．クラス名
・Unityオブジェクトにアタッチするクラスの場合、末尾に「Component」を付与する
・
2．Unityオブジェクト名

□DB、ER図
・必要なテーブル名を列挙
-- Master --
UnitBaseStatusData										…　status FK AssetId
UnitAssetData											…　asset FK UnitId,PrefabId,FaceId,
UnitMainStatusData										…　main FK UnitId
UnitSubStatusData										…　sub FK UnitId
UnitMaxStatusData										…　maxparam
UnitStageStatusData										…　unit stage FK StageId,UnitId
UnitGrowData											…　grow FK UnitId
UnitStageItemData										…　関連付け(enemy) FK UnitId,ItemId,StageId
UnitStageSkillData										…　関連付け(enemy) FK UnitId,SkillId,StageId
UnitStagePlacementData									…　placement FK StageId
ExperienceData											…　experience
SkillData												…　skill FK StatusGrantedParamId,IconId
SkillLevelData											…　skill level FK SkillId
ItemData												…　item FK StatusGrantedParamId,IconId
StageData												…　stage
StageClearTriggerData									…　stage clear trigger FK StageId,TriggerId
MissionData												…　mission trigger FK StageId,TriggerId
EventData												…　event FK? EventSender(PrimaryKey) 
EventTriggerData										…　trigger FK? TriggerSender(PrimaryKey) 
StageEventTriggerData									…　trigger FK StageId,EventId,TriggerId
StatusGrantedParamData									…　status param 
ScenarioData											…　Scenario
ScenarioEventData										…　scenario event FK ScenarioId,EventId
ScenarioEventTriggerData								…　scenario event FK ScenarioId,EventId
MasterCodeData											…　MasterCode
ResourcePathData										…　Resource
LabelResourcesData										…　LabelResource

-- Transaction --
EventStatusData											…　event status FK EventId
MissionStatusData										…　status trigger FK MissionId
SaveData												…　save
UnitItemData											…　関連付け(main,sub) FK UnitId(main),ItemId
UnitSkillData											…　関連付け(main,sub) FK UnitId(main),SkillId
UnitUsedHistoryData										…　使用履歴 FK UnitId
UnitGrowData											…　 FK UnitId
StageHistorydData										…　hisotory FK StageId
StageContinueData										…　Continue FK StageId
HaveSubUnitData											…　have sub unit FK UnitId
HaveItemData											…　have item FK UnitId
GameConfigData											…　Config

// 中断、中断データ終了後の処理は綿密に計画すること

ContinueEventStatusData									…　event status FK EventId
ContinueUnitItemData									…　関連付け(main,sub) FK UnitId(main),ItemId
ContinueUnitSkillData									…　関連付け(main,sub) FK UnitId(main),SkillId
ContinueUnitStageStatusData								…　unit stage FK StageId,UnitId
ContinueUnitStageItemData								…　関連付け(enemy) FK UnitId,ItemId,StageId

//

・詳細
SaveData												
・Id
・CreateDate
・UpdateDate
UnitBaseStatusData										
・Id
・Name
・Hp
・Attack
・Defence
・Range
・Move
・Luck
・HIt
・Avoid
・PrefabId
・FaceId
UnitMainStatusData										
・Id
・UnitId(FK)
・UnitCategory(Type)									
・Mp

UnitSubStatusData										
・Id
・UnitId(FK)
・Cost
・AiCategory											
UnitUsedHistoryData										
・Id
・UnitId(FK)
・Count
UnitMaxStatusData										
・Id
・UnitId
・Hp
・Mp
・Attack
・Defence
・Range
・Move
・Luck
・HIt
・Cost
GrowData											…　
・Id
・UnitId
・
SkillData											…　
・Id
・SkillCategory											
・
・
UnitSkillData											
・Id
・UnitId
・SkillId
ItemData												
・Id
・Name													
・ItemCategory											

UnitItemData											
・Id
・UnitId
・ItemId
StageData												
・StageId
・Name
・Width
・Height
・Introduction
・ConstitutionJson
StageClearData											
・Id
・StageId
UnitStageStatusData										
・Id
・StageId
・UnitId
・AiCategory
・PositionId
UnitStageSkillData										
・Id
・StageId
・UnitId
・SkillId
UnitStageItemData										
・Id
・StageId
・UnitId
・ItemId
EventData												
・Id
・EventCategory											
・EventDetail
・MaxCount
StageGrantedData										
・Id
・GrantCategory											
・GrantIconPath
・StatusGrantedParamId
StatusGrantedParamData									
・Id
・Name
・Hp
・Mp
・Attack
・Defence
・Range
・Move
・Luck
・HIt
・Avoid
StageEventData											
・Id
・StageId
・EventId
・TriggerCategory										
・TriggerDetail
ScenarioEventData										
・Id
・ScenarioId
・EventId
StageHistorydData										
・Id
・StageId
・PlayCount
・ClearCount
・ClearFlg
ContinueStageData										
・Id
・StageId
・CreateDate
ScenarioData											
・Id
・FilePath
・ScenarioCategory
ConfigData												
・Id
・Volume
・AutoControllFlg
・GameSpeed
・TextSpeed
MasterTabldeData										
・Id
・CodeId
・Category
・SortNo

書留タスク
Editor
□テーブル管理コード
・全てのテーブルを再生成する
・全てのテーブルに対して存在チェックをかける
・テーブル削除SQL
・csv出力/インポート

□コマンド
レンジ設定
・最初にメインコマンドの範囲の設定を行う。その際にサブコマンド開始位置を設定する。
・次にサブコマンドの設定を行い処理を終了する。
予測レンジ
・ターン開始時にその時の状態で範囲を設定する。
　P:両方
　E:Eのみ
・ユニットが座標移動を行った場合、移動前の座標を範囲に設定していたユニットの範囲を再設定する。

□AI作成
種類(兼移動決定の指針)
・Wait
・InRange
・LowHp
・TargetMain
・Simple
・Fool
攻撃決定の優先順位
・メイン
・キル
・攻撃範囲外
・与ダメージ
・生存
・その他
・オブジェクト

□移動ルート設定


実装経緯

□Unitをジェネリックで実装しないことによるメリット、デメリット
メリット
・クラス間での値の受け渡しがメイン、サブに関わらずに行える
デメリット
・クラス間で値の受け渡し行う場会、メインとサブのステータスは扱えない
・DBから値を取得する際に、基本ステータスの取得しか行えないため、ユニット生成に必要なデータが一回で揃えられない
なぜこの考えに至ったか？
・もしもUnitにサブ以外が増えた場合、拡張性が無い
・Subを拡張していくしかない

□UnityObjectを破棄した場合の考慮
ユニット
・破棄された場合、Sqliteクラスのインスタンスが破棄されるのでは？
メリット
・基本ステータス。そのユニットに紐付くイベントを一回で削除できる
デメリット
・破棄されるオブジェクト以外でデータを参照していた場合、インスタンスが破棄されてしまいデータが扱えない
↑今のところオブジェクト内のデータはオブジェクト内だけで完結する予定

□連続で比較する場合と単体で比較する場合はどちらが速い？
比較内容
・int[] に対してintを連続で比較する
・int[] に対してint[]内の要素を含むか比較する
結論
気にするほどの差ではない
